package in.ravikalla.controllers;

import static org.mockito.Mockito.when;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import in.ravikalla.service.PersonService;

/**
 * 
 * @author ravi kalla
 * @see <a href="http://www.bytestree.com/">BytesTree</a>
 *
 */
@RunWith(SpringRunner.class)
//@WebMvcTest(PersonController.class)
@SpringBootTest(classes=PersonController.class)
//@SpringBootTest(webEnvironment=WebEnvironment.RANDOM_PORT)
//@ContextConfiguration(classes = {PersonService.class, TestConfigMongo.class})
public class PersonControllerTest {

	private static Log l = LogFactory.getLog(PersonControllerTest.class);

	@Autowired
	private MockMvc mockMvc;

//	@MockBean
//	EmployeeService empService;

	@InjectMocks
	private PersonService personService;

	private final String URL_PERSONS = "/persons";

	@Test
	public void testGetAllPersons() throws Exception {
		l.info("Start : PersonControllerTest.testGetAllPersons()");

		when(personService.findAll()).thenCallRealMethod();

		MvcResult result = mockMvc.perform(MockMvcRequestBuilders.post(URL_PERSONS).contentType(MediaType.APPLICATION_JSON_UTF8)
				.accept(MediaType.APPLICATION_JSON_UTF8)).andReturn();
		int status = result.getResponse().getStatus();
		l.info("Status is : " + status);
		l.info("End : PersonControllerTest.testGetAllPersons()");
//
//		assertEquals("Incorrect Response Status", HttpStatus.CREATED.value(), status);
//
//		// prepare data and mock's behaviour
//		Employee empStub = new Employee(1l, "bytes", "tree", "developer", 12000);
//		when(empService.save(any(Employee.class))).thenReturn(empStub);
//
//		// execute
//		MvcResult result = mockMvc.perform(MockMvcRequestBuilders.post(URL).contentType(MediaType.APPLICATION_JSON_UTF8)
//				.accept(MediaType.APPLICATION_JSON_UTF8).content(TestUtils.objectToJson(empStub))).andReturn();
//
//		// verify
//		int status = result.getResponse().getStatus();
//		assertEquals("Incorrect Response Status", HttpStatus.CREATED.value(), status);
//
//		// verify that service method was called once
//		verify(empService).save(any(Employee.class));
//
//		Employee resultEmployee = TestUtils.jsonToObject(result.getResponse().getContentAsString(), Employee.class);
//		assertNotNull(resultEmployee);
//		assertEquals(1l, resultEmployee.getId().longValue());

	}
//
//	@Test
//	public void testGetEmployee() throws Exception {
//
//		// prepare data and mock's behaviour
//		Employee empStub = new Employee(1l, "bytes", "tree", "developer", 12000);
//		when(empService.getById(any(Long.class))).thenReturn(empStub);
//
//		// execute
//		MvcResult result = mockMvc
//				.perform(MockMvcRequestBuilders.get(URL + "{id}", new Long(1)).accept(MediaType.APPLICATION_JSON_UTF8))
//				.andReturn();
//
//		// verify
//		int status = result.getResponse().getStatus();
//		assertEquals("Incorrect Response Status", HttpStatus.OK.value(), status);
//
//		// verify that service method was called once
//		verify(empService).getById(any(Long.class));
//
//		Employee resultEmployee = TestUtils.jsonToObject(result.getResponse().getContentAsString(), Employee.class);
//		assertNotNull(resultEmployee);
//		assertEquals(1l, resultEmployee.getId().longValue());
//	}
//
//	@Test
//	public void testGetEmployeeNotExist() throws Exception {
//
//		// prepare data and mock's behaviour
//		// Not Required as employee Not Exist scenario
//
//		// execute
//		MvcResult result = mockMvc
//				.perform(MockMvcRequestBuilders.get(URL + "{id}", new Long(1)).accept(MediaType.APPLICATION_JSON_UTF8))
//				.andReturn();
//
//		// verify
//		int status = result.getResponse().getStatus();
//		assertEquals("Incorrect Response Status", HttpStatus.NOT_FOUND.value(), status);
//
//		// verify that service method was called once
//		verify(empService).getById(any(Long.class));
//
//		Employee resultEmployee = TestUtils.jsonToObject(result.getResponse().getContentAsString(), Employee.class);
//		assertNull(resultEmployee);
//	}
//
//	@Test
//	public void testGetAllEmployee() throws Exception {
//
//		// prepare data and mock's behaviour
//		List<Employee> empList = buildEmployees();
//		when(empService.getAll()).thenReturn(empList);
//
//		// execute
//		MvcResult result = mockMvc.perform(MockMvcRequestBuilders.get(URL).accept(MediaType.APPLICATION_JSON_UTF8))
//				.andReturn();
//
//		// verify
//		int status = result.getResponse().getStatus();
//		assertEquals("Incorrect Response Status", HttpStatus.OK.value(), status);
//
//		// verify that service method was called once
//		verify(empService).getAll();
//
//		// get the List<Employee> from the Json response
//		TypeToken<List<Employee>> token = new TypeToken<List<Employee>>() {
//		};
//		@SuppressWarnings("unchecked")
//		List<Employee> empListResult = TestUtils.jsonToList(result.getResponse().getContentAsString(), token);
//
//		assertNotNull("Employees not found", empListResult);
//		assertEquals("Incorrect Employee List", empList.size(), empListResult.size());
//
//	}
//
//	@Test
//	public void testDeleteEmployee() throws Exception {
//		// prepare data and mock's behaviour
//		Employee empStub = new Employee(1l);
//		when(empService.getById(any(Long.class))).thenReturn(empStub);
//
//		// execute
//		MvcResult result = mockMvc.perform(MockMvcRequestBuilders.delete(URL + "{id}", new Long(1))).andReturn();
//
//		// verify
//		int status = result.getResponse().getStatus();
//		assertEquals("Incorrect Response Status", HttpStatus.GONE.value(), status);
//
//		// verify that service method was called once
//		verify(empService).delete(any(Long.class));
//
//	}
//
//	@Test
//	public void testUpdateEmployee() throws Exception {
//		// prepare data and mock's behaviour
//		// here the stub is the updated employee object with ID equal to ID of
//		// employee need to be updated
//		Employee empStub = new Employee(1l, "bytes", "tree", "developer", 12000);
//		when(empService.getById(any(Long.class))).thenReturn(empStub);
//
//		// execute
//		MvcResult result = mockMvc.perform(MockMvcRequestBuilders.put(URL).contentType(MediaType.APPLICATION_JSON_UTF8)
//				.accept(MediaType.APPLICATION_JSON_UTF8).content(TestUtils.objectToJson(empStub))).andReturn();
//
//		// verify
//		int status = result.getResponse().getStatus();
//		assertEquals("Incorrect Response Status", HttpStatus.OK.value(), status);
//
//		// verify that service method was called once
//		verify(empService).save(any(Employee.class));
//
//	}
//
//	private List<Person> buildPersons() {
//		Person p1 = new Person();
//		Person p2 = new Person();
//		List<Person> lstPerson = Arrays.asList(p1, p2);
//		return lstPerson;
//	}
}
